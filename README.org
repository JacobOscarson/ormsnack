* Python AST generation / manipulation toolkit

#+BEGIN_SRC python
>>> import ormsnack.tree
>>> \
... def foo(x: int) -> int:
...     return x + 23
>>> before_result = foo(234)
>>> before_foo_ast = ormsnack.tree.getast(foo)
>>> recomp = ormsnack.tree.compile_ast(before_foo_ast, foo.__name__)
>>> ormsnack.tree.exec_sym(recomp, foo.__name__)(234)
257
>>>
#+END_SRC

The more high-level idea is to simplify AST nodes into a few
categories (Right now there's `Statement`, `Block`, `Sym`,
`Literal`). A few might follow. A top-level function will take any
live object, transform to this simplified AST and use the Query DLS
developed seperately in [[https://github.com/JacobOscarson/micropy][micropy]].

You should be able to use the DSL to query for nodes in the simplified
AST, e.g. like this:

#+BEGIN_SRC python
>>> from ormsnack import api
>>> \
... def foo(x: int) -> int:
...     return x + 23
>>> snack = api.snacka(foo)
>>> for node in snack << 'foo':
...     print(str(node))
<Block:foo(x)>
>>>
#+END_SRC
